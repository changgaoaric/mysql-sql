SQL语句

SELECT * FROM (
SELECT u.username , ig.title , igp.content 
FROM ph_interestgroupitem igp
LEFT JOIN ph_user u ON igp.uid = u.userid
LEFT JOIN ph_interestgroup ig ON igp.groupid = ig.id
)js
WHERE js.username = 'jaypark' ;

Result：
Username    Title   Content
jaypark     旅游频  寻驴友去西藏。。

本例以 ph_interestgroupitem （帖子表）为基表，左连接了 ph_user （用户表）、ph_interestgroup（兴趣组表），

查询出当前贴子发言人的信息和帖子所属兴趣组的信息。


语句2 （查询不同部门的总人数）
SELECT d.dept_id,d.name,e.how_many num_employees FROM department d LEFT JOIN
( SELECT dept_id,COUNT(*) how_many FROM employee GROUP BY dept_id) e ON e.dept_id = d.dept_id;

语句3 表达式作为子查询生成器（）
SELECT
( SELECT p.name FROM product p WHERE p.product_cd=a.product_cd AND product_type_cd='ACCOUNT') product,
(SELECT b.name FROM branch b WHERE b.branch_id=a.open_branch_id) branch,
(SELECT CONCAT(e.fname,' ',e.lname) FROM employee e WHERE e.emp_id = a.open_emp_id ) NAME,
SUM(a.avail_balance) tot_deposits
FROM account a
GROUP BY a.`product_cd`,a.`open_branch_id`,a.`open_emp_id` ORDER BY 1,2;


语句4（语句3基础上去掉NULL值）

SELECT tot.product,tot.branch,tot.name,tot.tot_deposits FROM
(SELECT
( SELECT p.name FROM product p WHERE p.product_cd=a.product_cd AND product_type_cd='ACCOUNT') product,
(SELECT b.name FROM branch b WHERE b.branch_id=a.open_branch_id) branch,
(SELECT CONCAT(e.fname,' ',e.lname) FROM employee e WHERE e.emp_id = a.open_emp_id ) NAME,
SUM(a.avail_balance) tot_deposits
FROM account a
GROUP BY a.`product_cd`,a.`open_branch_id`,a.`open_emp_id`) tot
WHERE tot.product IS NOT NULL ORDER BY 1,2;


语句5（利用子查询提高查询速度）

Sql代码  收藏代码
    SELECT ps.* FROM cdb_playsgame ps WHERE ps.credits=(select MAX(credits)   
    FROM cdb_playsgame ps1   
    where ps.uid=ps1.uid AND ps.gametag=ps1.gametag) AND ps.gametag='yeti3'   
    GROUP BY ps.uid order by ps.credits desc LIMIT 100;  


Sql代码  收藏代码
    SELECT ps.*   
    FROM cdb_playsgame ps,(select ps1.uid, ps1.gametag, MAX(credits) as credits  
    FROM cdb_playsgame ps1 group by uid,gametag) t  
    WHERE ps.credits=t.credits AND ps.uid=t.uid AND ps.gametag=t.gametag AND ps.gametag='yeti3'   
    GROUP BY ps.uid order by ps.credits desc LIMIT 100;  
执行时间仅为0.22秒，比原来的25秒提高了10000倍 


语句6

查询当天游戏最好成绩
Sql代码  收藏代码
     SELECT ps. * , mf. * , m.username  
    FROM cdb_playsgame ps  
    LEFT JOIN cdb_memberfields mf ON mf.uid = ps.uid  
    LEFT JOIN cdb_members m ON m.uid = ps.uid  
    WHERE ps.gametag = 'chuansj'  
    AND FROM_UNIXTIME( ps.dateline, '%Y%m%d' ) = '20081008'  
    AND ps.credits = (  
    SELECT MAX( ps1.credits )  
    FROM cdb_playsgame ps1  
    WHERE ps.uid = ps1.uid  
    AND ps1.gametag = 'chuansj'  
    AND FROM_UNIXTIME( ps1.dateline, '%Y%m%d' ) = '20081008' )  
    GROUP BY ps.uid  
    ORDER BY credits DESC  
    LIMIT 0 , 50   
像查询里
Sql代码  收藏代码

    AND ps.credits=(SELECT MAX(ps1.credits)   
      FROM {$tablepre}playsgame ps1 where ps.uid=ps1.uid AND ps1.gametag = '$game'    
      AND FROM_UNIXTIME(ps1.dateline, '%Y%m%d') = '$todaytime'  )  


特别消耗时间

另外，像：
Sql代码  收藏代码
    FROM_UNIXTIME(ps1.dateline, '%Y%m%d') = '$todaytime'  
这样的语句会导致索引无效，因为对每个dataline的值都需要用函数计算一遍，需要调整为：
Sql代码  收藏代码
    AND ps1.dateline >= UNIX_TIMESTAMP('$todaytime')    
//更改后
Sql代码  收藏代码
     SELECT ps. * , mf. * , m.username  
    FROM cdb_playsgame ps, cdb_memberfields mf, cdb_members m, (  
      
    SELECT ps1.uid, MAX( ps1.credits ) AS credits  
    FROM cdb_playsgame ps1  
    WHERE ps1.gametag = 'chuansj'  
    AND ps1.dateline >= UNIX_TIMESTAMP( '20081008' )  
    GROUP BY ps1.uid  
    ) AS t  
    WHERE mf.uid = ps.uid  
    AND m.uid = ps.uid  
    AND ps.gametag = 'chuansj'  
    AND ps.credits = t.credits  
    AND ps.uid = t.uid  
    GROUP BY ps.uid  
    ORDER BY credits DESC  
    LIMIT 0 , 50 ；


语句7（from里的子查询）

SELECT PLAYERNO,NAME,NUMBER  
FROM (SELECT PLAYERNO,NAME,  
             (SELECT COUNT(*)  
              FROM PENALTIES  
              WHERE PENALTIES.PLAYERNO =  
                    PLAYERS.PLAYERNO)  
              AS NUMBER  
       FROM PLYERS) AS PN  
WHERE NUMBER>=2 
